package orchestrator

import (
	"encoding/json"
	"fmt"
	"log"
	"net/http"
	"os"
	"strconv"
	"sync"
	"time"

	"github.com/PavelBradnitski/calc_go/pkg/calculation"
)

type Expression struct {
	ID         int             `json:"id"`
	Status     string          `json:"status"`
	Result     float64         `json:"result,omitempty"`
	SubResults map[int]float64 `json:"-"` // –°—é–¥–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
}

type Task struct {
	ExpressionID int     `json:"expId"`
	ID           int     `json:"id"`
	Arg1         float64 `json:"arg1"`
	Arg2         float64 `json:"arg2"`
	Operation    string  `json:"operation"`
	ExecTime     int     `json:"operation_time"`
}

type Result struct {
	ExpressionID int     `json:"expId"`
	TaskID       int     `json:"taskId"`
	Result       float64 `json:"result"`
}

type Orchestrator struct {
	Expressions map[int]Expression
	Tasks       []Task
	Results     map[int]float64
	RWMutex     sync.RWMutex
	TaskIndex   int
	ExprIndex   int
	ResultChan  chan Result
}

func NewOrchestrator() *Orchestrator {
	return &Orchestrator{
		Expressions: make(map[int]Expression),
		Results:     make(map[int]float64),
		TaskIndex:   0,
		ExprIndex:   0,
		ResultChan:  make(chan Result, 100),
	}
}

func (o *Orchestrator) AddExpression(w http.ResponseWriter, r *http.Request) {
	if r.Method != http.MethodPost {
		http.Error(w, "Method Not Allowed", http.StatusMethodNotAllowed)
		return
	}

	fmt.Println("‚úÖ Received POST /api/v1/calculate")

	var data struct {
		Expression string `json:"expression"`
	}
	if err := json.NewDecoder(r.Body).Decode(&data); err != nil {
		fmt.Println("‚ùå JSON decode error:", err)
		http.Error(w, "Invalid request", http.StatusUnprocessableEntity)
		return
	}
	fmt.Println("üì• Expression received:", data.Expression)
	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID –¥–ª—è –≤—ã—Ä–∞–∂–µ–Ω–∏—è
	o.RWMutex.Lock()
	id := o.ExprIndex
	o.ExprIndex++
	o.Expressions[id] = Expression{
		ID:         id,
		Status:     "pending",
		SubResults: make(map[int]float64),
	}
	o.RWMutex.Unlock()
	expressionInSlice, err := calculation.ParseExpression(data.Expression)
	if err != nil {
		w.WriteHeader(http.StatusUnprocessableEntity)
		fmt.Fprintf(w, "{\n\terror: \"%s\"\n}", calculation.ErrInvalidExpression)
		return
	}
	postfix, err := calculation.Calculator(expressionInSlice)
	if err != nil {
		w.WriteHeader(http.StatusUnprocessableEntity)
		fmt.Fprintf(w, "{\n\terror: \"%s\"\n}", calculation.ErrInvalidExpression)
		return
	}
	go func(exprID int, rpn *[]string, orchestrator *Orchestrator) {
		orchestrator.ParseExpressionToTasks(exprID, *rpn)
	}(id, postfix, o)
	// –†–∞–∑–±–∏—Ä–∞–µ–º –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –≤ –∑–∞–¥–∞—á–∏

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ID –∫–ª–∏–µ–Ω—Ç—É
	w.WriteHeader(http.StatusCreated)
	json.NewEncoder(w).Encode(map[string]int{"id": id})
}

func (o *Orchestrator) ParseExpressionToTasks(exprID int, postfixExpr []string) {
	//var tasks []Task
	var stack []float64
	taskID := 0
	fmt.Println("üîÑ Starting ParseExpressionToTasks for ID:", exprID)

	for _, token := range postfixExpr {
		// –ï—Å–ª–∏ —ç—Ç–æ —á–∏—Å–ª–æ ‚Üí –∫–ª–∞–¥–µ–º –≤ —Å—Ç–µ–∫
		if num, err := strconv.ParseFloat(token, 64); err == nil {
			stack = append(stack, num)
			continue
		}

		// –≠—Ç–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä, –∑–Ω–∞—á–∏—Ç, –¥–æ—Å—Ç–∞–µ–º –¥–≤–∞ –æ–ø–µ—Ä–∞–Ω–¥–∞
		if len(stack) < 2 {
			log.Println("–û—à–∏–±–∫–∞: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ–ø–µ—Ä–∞–Ω–¥–æ–≤ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏", token)
			return
		}

		// –î–æ—Å—Ç–∞–µ–º –æ–ø–µ—Ä–∞–Ω–¥—ã –∏–∑ —Å—Ç–µ–∫–∞ (arg2 - –ø–æ—Å–ª–µ–¥–Ω–∏–π, arg1 - –ø—Ä–µ–¥–ø–æ—Å–ª–µ–¥–Ω–∏–π)
		arg2 := stack[len(stack)-1]
		arg1 := stack[len(stack)-2]
		stack = stack[:len(stack)-2] // –£–¥–∞–ª—è–µ–º –∏—Ö –∏–∑ —Å—Ç–µ–∫–∞

		// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
		execTime := getExecTimeForOp(token)

		// –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É
		task := Task{
			ExpressionID: exprID,
			ID:           exprID*100 + taskID, // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –∑–∞–¥–∞—á–∏
			Arg1:         arg1,
			Arg2:         arg2,
			Operation:    token,
			ExecTime:     execTime,
		}
		fmt.Println("üìå Created task:", task)
		o.RWMutex.Lock()
		o.Tasks = append(o.Tasks, task)
		o.RWMutex.Unlock()
		fmt.Printf("Tasks %v\n", o.Tasks)
		// –ñ–¥–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –∏ –ø–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
		result := o.WaitForTaskResult(task.ExpressionID, task.ID)
		fmt.Printf("Result %v\n", result)
		// –†–µ–∑—É–ª—å—Ç–∞—Ç —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ –∫–ª–∞–¥–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ —Å—Ç–µ–∫
		stack = append(stack, result)

		taskID++
	}
	fmt.Printf("Finished\n")

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ –∫–æ–Ω—Ü–µ –≤ —Å—Ç–µ–∫–µ –æ—Å—Ç–∞–ª–æ—Å—å –æ–¥–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ (—Ä–µ–∑—É–ª—å—Ç–∞—Ç)
	if len(stack) != 1 {
		log.Println("–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ—Å—Ç—Ñ–∏–∫—Å–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ")
		return
	}
	o.RWMutex.Lock()
	o.Expressions[exprID] = Expression{ID: exprID, Status: "done", Result: stack[0]}
	o.RWMutex.Unlock()
}
func (o *Orchestrator) WaitForTaskResult(expID, taskID int) float64 {
	for {
		o.RWMutex.RLock() // üîí –†–∞–∑—Ä–µ—à–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —á—Ç–µ–Ω–∏–µ
		result, exists := o.Expressions[expID].SubResults[taskID]
		o.RWMutex.RUnlock() // üîì –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º —á—Ç–µ–Ω–∏–µ

		if exists {
			return result
		}

		time.Sleep(1 * time.Second) // –ñ–¥–µ–º, —á—Ç–æ–±—ã –Ω–µ –≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
	}
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏
func getExecTimeForOp(op string) int {
	switch op {
	case "+":
		return getExecTime("TIME_ADDITION_MS")
	case "-":
		return getExecTime("TIME_SUBTRACTION_MS")
	case "*":
		return getExecTime("TIME_MULTIPLICATIONS_MS")
	case "/":
		return getExecTime("TIME_DIVISIONS_MS")
	default:
		return 100 // –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
	}
}

func (o *Orchestrator) GetExpressions(w http.ResponseWriter, r *http.Request) {
	var expressions []Expression
	o.RWMutex.RLock()
	for _, expr := range o.Expressions {
		expressions = append(expressions, expr)
	}
	o.RWMutex.RUnlock()
	json.NewEncoder(w).Encode(map[string]interface{}{"expressions": expressions})
}

//	func (o *Orchestrator) HandleTask(w http.ResponseWriter, r *http.Request) {
//		if r.Method == http.MethodGet {
//			o.GetTask(w, r)
//		} else if r.Method == http.MethodPost {
//			o.ReceiveResult(w, r)
//		} else {
//			http.Error(w, "Method Not Allowed", http.StatusMethodNotAllowed)
//		}
//	}
//
// GetTask –æ—Ç–¥–∞–µ—Ç –∞–≥–µ–Ω—Ç—É —Å–ª–µ–¥—É—é—â—É—é –∑–∞–¥–∞—á—É, —É–¥–∞–ª—è—è –µ—ë –∏–∑ —Å–ø–∏—Å–∫–∞
func (o *Orchestrator) GetTask(w http.ResponseWriter, r *http.Request) {
	o.RWMutex.Lock() // üîí –ë–ª–æ–∫–∏—Ä—É–µ–º –Ω–∞ –∑–∞–ø–∏—Å—å, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –≥–æ–Ω–∫–∏ –¥–∞–Ω–Ω—ã—Ö
	defer o.RWMutex.Unlock()

	if len(o.Tasks) == 0 {
		http.Error(w, "No tasks available", http.StatusNotFound)
		return
	}

	task := o.Tasks[0]
	o.Tasks = o.Tasks[1:] // –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –∏–∑ –æ—á–µ—Ä–µ–¥–∏

	json.NewEncoder(w).Encode(map[string]Task{"task": task})
}

func (o *Orchestrator) ReceiveResult(w http.ResponseWriter, r *http.Request) {
	var result Result
	if err := json.NewDecoder(r.Body).Decode(&result); err != nil {
		http.Error(w, "Invalid request", http.StatusUnprocessableEntity)
		return
	}

	o.RWMutex.Lock()
	defer o.RWMutex.Unlock()

	o.ResultChan <- result

	w.WriteHeader(http.StatusOK)
}

func (o *Orchestrator) ProcessResults() {
	for result := range o.ResultChan {
		o.RWMutex.RLock()
		o.Results[result.ExpressionID] = result.Result
		o.Expressions[result.ExpressionID].SubResults[result.TaskID] = result.Result
		o.Expressions[result.ExpressionID] = Expression{ID: result.ExpressionID, Status: "completed", Result: result.Result, SubResults: o.Expressions[result.ExpressionID].SubResults}
		//o.Expressions[result.ExpressionID] = Expression{ID: result.ExpressionID, Status: "completed", Result: result.Result, SubResults: map[int]float64{result.TaskID: result.Result}}
		o.RWMutex.RUnlock()
	}
}

func StartOrchestrator() {
	orchestrator := NewOrchestrator()
	go orchestrator.ProcessResults()

	http.HandleFunc("/api/v1/calculate", orchestrator.AddExpression)
	http.HandleFunc("/api/v1/expressions", orchestrator.GetExpressions)
	http.HandleFunc("/internal/task", orchestrator.GetTask)
	http.HandleFunc("/internal/result", orchestrator.ReceiveResult)

	fmt.Println("Server is running on :8090")
	fmt.Println("Registered routes:")
	fmt.Println("- POST /api/v1/calculate")
	fmt.Println("- GET/POST /internal/task")

	// // –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ –≤—Ö–æ–¥—è—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã
	// loggedMux := http.NewServeMux()
	// loggedMux.HandleFunc("/", func(w http.ResponseWriter, r *http.Request) {
	// 	fmt.Println("Received request:", r.Method, r.URL.Path)
	// 	http.DefaultServeMux.ServeHTTP(w, r)
	// })

	log.Fatal(http.ListenAndServe(":8090", nil))
}

func getExecTime(env string) int {
	val, err := strconv.Atoi(os.Getenv(env))
	if err != nil {
		return 100
	}
	return val
}
